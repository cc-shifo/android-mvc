package model;

import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

import javax.imageio.ImageIO;

public class Model {
	private final static String IMAGE_PATH = "D:/workspace/java/mvc/classicmvc/res/96x96PX.png";
	private static File file = new File(IMAGE_PATH);
	private Image mImage;
	private OnStateChangeListener mListener;
	public interface OnStateChangeListener {
		void onStateChanged(Image image);
	}
	
	public Model() {
		// TODO Auto-generated constructor stub
		try {
			/*File file = new File(IMAGE_PATH);*/
			InputStream iStream = new FileInputStream(file);
			mImage = ImageIO.read(iStream);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	public void setOnStateChangeListener(OnStateChangeListener listener) {
		mListener = listener;
	}
	
	public void loadImage() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				// TODO Auto-generated method stub
				try {
					/*Thread.sleep(2000);*/
					/*mImage = ImageIO.read(file);*/
					Thread.sleep(800);
					InputStream iStream = new FileInputStream(file);
					mImage = ImageIO.read(iStream);
					
					/**
					 * Model告诉View自己的状态变了
					 * 
					 * Model的数据状态发生了改变，我们就调用这个由View实现了的onStateChanged函数，
					 * 进而实现了Model向View发出通知，告诉View它的数据状态变了。然后我们可以在
					 * onStateChanged里直接或者间接的实现View的刷新
					 * */
					if (mListener != null) {
						mListener.onStateChanged(mImage);
					}
				} catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
				}
			}
		}).start();
	}
	
	public void clearImage() {
		// 清除图片
		mImage = null;
		if (mListener != null) {
			mListener.onStateChanged(null);
		}
	}
}
